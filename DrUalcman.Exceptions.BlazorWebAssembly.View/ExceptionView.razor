<ErrorBoundary @ref=ErrorBoundaryRef>
    <ChildContent>
        @ChildContent
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger">
            @if(context.GetType() == typeof(ProblemDetailsException))
            {
                ProblemDetailsException ex = context as ProblemDetailsException;
                System.Net.HttpStatusCode status = (System.Net.HttpStatusCode)ex.ProblemDetail.Status;
                <div>
                    @switch(status)
                    {
                        case System.Net.HttpStatusCode.Unauthorized:
                        case System.Net.HttpStatusCode.Forbidden:
                            IsUnauthorize = true;
                            @($"[{(int)status}] {status}")
                            <p>Login Please</p>
                            break;
                        case System.Net.HttpStatusCode.NotFound:
                            <p>End point not found</p>
                            break;
                        default:
                            <span>
                                @ex?.ProblemDetail.Instance
                                [<a href="@ex?.ProblemDetail.Type" target="_blank">@ex?.ProblemDetail.Status </a>]
                                @ex?.ProblemDetail.Title
                                <hr />
                                @ex?.ProblemDetail.Detail
                            </span>
                            break;
                    }
                </div>
                if(ex?.ProblemDetail.InvalidParams != null)
                {
                    <ul>
                        @foreach(var failure in ex.ProblemDetail.InvalidParams)
                        {
                            <li>
                                @failure.Key: @failure.Value
                            </li>
                        }
                    </ul>
                }
            }
            else if(context.GetType() == typeof(ValidationException))
            {
                ValidationException ex = context as ValidationException;
                <div>
                    @ex?.Message
                </div>
                if(ex?.Failures != null)
                {
                    <ul>
                        @foreach(var failure in ex.Failures)
                        {
                            <li>
                                @failure.PropertyName: @failure.ErrorMessage
                            </li>
                        }
                    </ul>
                }
            }
            else if(context.GetType() == typeof(UpdateException))
            {
                UpdateException ex = context as UpdateException;
                <div>
                    @ex?.Message
                </div>
                if(ex?.Entries != null)
                {
                    <ul>
                        @foreach(var failure in ex.Entries)
                        {
                            <li>
                                @failure
                            </li>
                        }
                    </ul>
                }
            }
            else if(context.GetType() == typeof(GeneralException))
            {
                GeneralException ex = context as GeneralException;
                <div>
                    @ex?.Message
                    <hr />
                    @ex?.Detail
                </div>
            }
            else if(context.GetType() == typeof(HttpRequestException))
            {
                HttpRequestException ex = context as HttpRequestException;
                <div>
                    @switch(ex.StatusCode)
                    {
                        case System.Net.HttpStatusCode.Unauthorized:
                        case System.Net.HttpStatusCode.Forbidden:
                            IsUnauthorize = true;
                            @($"[{(int)ex.StatusCode}] {ex.StatusCode}")
                            <p>Login Please</p>
                            break;
                        case System.Net.HttpStatusCode.NotFound:
                            <p>End point not found</p>
                            break;
                        default:
                            if(ex.StatusCode.HasValue)
                            {
                                @($"[{(int)ex.StatusCode}] {ex.StatusCode}")
                            }
                            @ex?.Message
                            break;
                    }
                    <hr />
                    <p>
                        @if(!string.IsNullOrEmpty(ex.HelpLink))
                        {
                            <span>More info <a href="@ex.HelpLink" class="btn btn-link">here</a></span>
                        }
                    </p>
                </div>
            }
            else
            {
                <div>
                    @context.Message
                </div>
            }
        </div>
        @if(OnClick.HasDelegate)
        {
            <button class="btn btn-danger" @onclick=RecoverWithAction>@ToHtml(ButtonText)</button>
        }
        else
        {
            @if(IsUnauthorize)
            {
                <button class="btn btn-danger" @onclick=BackToHome>@ToHtml(ButtonText)</button>
            }
            else
            {
                <button class="btn btn-danger" @onclick=Recover>@ToHtml(ButtonText)</button>
            }
        }
    </ErrorContent>
</ErrorBoundary>


@code {
    [Inject] public NavigationManager Navigation { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string ButtonText { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }

    public bool IsUnauthorize { get; private set; } = false;

    /// <summary>
    /// capturar exceptiones
    /// </summary>
    ErrorBoundary ErrorBoundaryRef;

    void Recover()
    {
        ErrorBoundaryRef?.Recover();
    }

    Task RecoverWithAction()
    {
        ErrorBoundaryRef?.Recover();
        OnClick.InvokeAsync();
        return Task.CompletedTask;
    }

    void BackToHome()
    {
        ErrorBoundaryRef?.Recover();
        Navigation.NavigateTo("", true);
    }

    protected override void OnParametersSet()
    {
        if(OnClick.HasDelegate && string.IsNullOrEmpty(ButtonText)) ButtonText = "Try Again";
        else ButtonText = "OK";
    }

    /// <summary>
    /// Convert string into a HTML markup to show correctly in the page
    /// </summary>
    /// <param name="content"></param>
    /// <returns></returns>
    MarkupString ToHtml(string content)
    {
        string addBr = content.Replace(Environment.NewLine, "<br/>").Replace("\n\r", "<br/>");
        MarkupString result = new MarkupString(addBr);
        return result;
    }
}
